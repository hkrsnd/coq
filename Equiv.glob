DIGEST 830536a6971f2bcc2800dc86abd90f8f
FEquiv
R53:65 Coq.Bool.Bool <> <> lib
R83:97 Coq.Arith.Arith <> <> lib
R115:129 Coq.Arith.EqNat <> <> lib
R147:161 Coq.omega.Omega <> <> lib
R179:192 Coq.Lists.List <> <> lib
R210:243 Coq.Logic.FunctionalExtensionality <> <> lib
R283:286 Maps <> <> lib
R304:306 Imp <> <> lib
def 2571:2576 <> aequiv
R2587:2590 Imp <> aexp ind
R2616:2620 Imp <> state def
R2639:2641 Coq.Init.Logic <> :type_scope:x_'='_x not
R2628:2632 Imp <> aeval def
R2637:2638 Equiv <> a1 var
R2634:2635 Equiv <> st var
R2642:2646 Imp <> aeval def
R2651:2652 Equiv <> a2 var
R2648:2649 Equiv <> st var
def 2667:2672 <> bequiv
R2683:2686 Imp <> bexp ind
R2712:2716 Imp <> state def
R2735:2737 Coq.Init.Logic <> :type_scope:x_'='_x not
R2724:2728 Imp <> beval def
R2733:2734 Equiv <> b1 var
R2730:2731 Equiv <> st var
R2738:2742 Imp <> beval def
R2747:2748 Equiv <> b2 var
R2744:2745 Equiv <> st var
def 3420:3425 <> cequiv
R3436:3438 Imp <> com ind
R3470:3474 Imp <> state def
R3482:3482 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3497:3503 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3518:3518 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3485:3487 Imp <> ::x_'/'_x_'\\'_x not
R3490:3493 Imp <> ::x_'/'_x_'\\'_x not
R3483:3484 Equiv <> c1 var
R3488:3489 Equiv <> st var
R3494:3496 Equiv <> st' var
R3506:3508 Imp <> ::x_'/'_x_'\\'_x not
R3511:3514 Imp <> ::x_'/'_x_'\\'_x not
R3504:3505 Equiv <> c2 var
R3509:3510 Equiv <> st var
R3515:3517 Equiv <> st' var
def 4097:4102 <> prog_a
R4106:4108 Imp <> com ind
R4115:4120 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4148:4155 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4184:4189 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4121:4124 Imp <> BNot constr
R4127:4129 Imp <> BLe constr
R4140:4143 Imp <> ANum constr
R4132:4134 Imp <> AId constr
R4136:4136 Imp <> X def
R4157:4161 Imp <> ::x_'::='_x not
R4156:4156 Imp <> X def
R4162:4166 Imp <> APlus constr
R4177:4180 Imp <> ANum constr
R4169:4171 Imp <> AId constr
R4173:4173 Imp <> X def
def 4204:4209 <> prog_b
R4213:4215 Imp <> com ind
R4332:4336 Imp <> ::x_';;'_x not
R4222:4225 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4246:4255 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4303:4314 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4327:4331 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4226:4228 Imp <> BEq constr
R4239:4242 Imp <> ANum constr
R4231:4233 Imp <> AId constr
R4235:4235 Imp <> X def
R4284:4290 Imp <> ::x_';;'_x not
R4257:4261 Imp <> ::x_'::='_x not
R4256:4256 Imp <> X def
R4262:4266 Imp <> APlus constr
R4277:4280 Imp <> ANum constr
R4269:4271 Imp <> AId constr
R4273:4273 Imp <> X def
R4292:4296 Imp <> ::x_'::='_x not
R4291:4291 Imp <> Y def
R4297:4300 Imp <> ANum constr
R4316:4320 Imp <> ::x_'::='_x not
R4315:4315 Imp <> Y def
R4321:4324 Imp <> ANum constr
R4365:4369 Imp <> ::x_';;'_x not
R4338:4342 Imp <> ::x_'::='_x not
R4337:4337 Imp <> X def
R4343:4348 Imp <> AMinus constr
R4359:4361 Imp <> AId constr
R4363:4363 Imp <> Y def
R4351:4353 Imp <> AId constr
R4355:4355 Imp <> X def
R4371:4375 Imp <> ::x_'::='_x not
R4370:4370 Imp <> Y def
R4376:4379 Imp <> ANum constr
def 4396:4401 <> prog_c
R4405:4407 Imp <> com ind
R4414:4417 Imp <> ::'SKIP' not
def 4432:4437 <> prog_d
R4441:4443 Imp <> com ind
R4450:4455 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4483:4490 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4535:4540 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4456:4459 Imp <> BNot constr
R4462:4464 Imp <> BEq constr
R4475:4478 Imp <> ANum constr
R4467:4469 Imp <> AId constr
R4471:4471 Imp <> X def
R4492:4496 Imp <> ::x_'::='_x not
R4491:4491 Imp <> X def
R4497:4501 Imp <> APlus constr
R4528:4531 Imp <> ANum constr
R4504:4508 Imp <> AMult constr
R4519:4521 Imp <> AId constr
R4523:4523 Imp <> Y def
R4511:4513 Imp <> AId constr
R4515:4515 Imp <> X def
def 4555:4560 <> prog_e
R4564:4566 Imp <> com ind
R4574:4578 Imp <> ::x_'::='_x not
R4573:4573 Imp <> Y def
R4579:4582 Imp <> ANum constr
def 4599:4604 <> prog_f
R4608:4610 Imp <> com ind
R4645:4649 Imp <> ::x_';;'_x not
R4618:4622 Imp <> ::x_'::='_x not
R4617:4617 Imp <> Y def
R4623:4627 Imp <> APlus constr
R4638:4641 Imp <> ANum constr
R4630:4632 Imp <> AId constr
R4634:4634 Imp <> X def
R4650:4655 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4682:4689 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4718:4723 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4656:4659 Imp <> BNot constr
R4662:4664 Imp <> BEq constr
R4675:4677 Imp <> AId constr
R4679:4679 Imp <> Y def
R4667:4669 Imp <> AId constr
R4671:4671 Imp <> X def
R4691:4695 Imp <> ::x_'::='_x not
R4690:4690 Imp <> Y def
R4696:4700 Imp <> APlus constr
R4711:4714 Imp <> ANum constr
R4703:4705 Imp <> AId constr
R4707:4707 Imp <> X def
def 4738:4743 <> prog_g
R4747:4749 Imp <> com ind
R4756:4761 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4767:4774 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4779:4784 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4762:4766 Imp <> BTrue constr
R4775:4778 Imp <> ::'SKIP' not
def 4799:4804 <> prog_h
R4808:4810 Imp <> com ind
R4817:4822 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4849:4856 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4885:4890 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4823:4826 Imp <> BNot constr
R4829:4831 Imp <> BEq constr
R4842:4844 Imp <> AId constr
R4846:4846 Imp <> X def
R4834:4836 Imp <> AId constr
R4838:4838 Imp <> X def
R4858:4862 Imp <> ::x_'::='_x not
R4857:4857 Imp <> X def
R4863:4867 Imp <> APlus constr
R4878:4881 Imp <> ANum constr
R4870:4872 Imp <> AId constr
R4874:4874 Imp <> X def
def 4905:4910 <> prog_i
R4914:4916 Imp <> com ind
R4923:4928 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4955:4962 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4991:4996 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4929:4932 Imp <> BNot constr
R4935:4937 Imp <> BEq constr
R4948:4950 Imp <> AId constr
R4952:4952 Imp <> Y def
R4940:4942 Imp <> AId constr
R4944:4944 Imp <> X def
R4964:4968 Imp <> ::x_'::='_x not
R4963:4963 Imp <> X def
R4969:4973 Imp <> APlus constr
R4984:4987 Imp <> ANum constr
R4976:4978 Imp <> AId constr
R4980:4980 Imp <> Y def
def 5011:5023 <> equiv_classes
R5027:5030 Coq.Init.Datatypes <> list ind
R5033:5036 Coq.Init.Datatypes <> list ind
R5038:5040 Imp <> com ind
prf 5319:5332 <> aequiv_example
R5337:5342 Equiv <> aequiv def
R5370:5373 Imp <> ANum constr
R5345:5350 Imp <> AMinus constr
R5361:5363 Imp <> AId constr
R5365:5365 Imp <> X def
R5353:5355 Imp <> AId constr
R5357:5357 Imp <> X def
prf 5427:5440 <> bequiv_example
R5445:5450 Equiv <> bequiv def
R5492:5496 Imp <> BTrue constr
R5453:5455 Imp <> BEq constr
R5483:5486 Imp <> ANum constr
R5458:5463 Imp <> AMinus constr
R5474:5476 Imp <> AId constr
R5478:5478 Imp <> X def
R5466:5468 Imp <> AId constr
R5470:5470 Imp <> X def
R5526:5530 Imp <> beval def
R5543:5556 Equiv <> aequiv_example thm
R5543:5556 Equiv <> aequiv_example thm
R5543:5556 Equiv <> aequiv_example thm
prf 5716:5724 <> skip_left
R5739:5744 Equiv <> cequiv def
R5767:5767 Equiv <> c var
R5756:5758 Imp <> ::x_';;'_x not
R5752:5755 Imp <> ::'SKIP' not
R5759:5759 Equiv <> c var
R5940:5944 Imp <> E_Seq constr
R5940:5944 Imp <> E_Seq constr
R5965:5970 Imp <> E_Skip constr
R5965:5970 Imp <> E_Skip constr
prf 6135:6144 <> skip_right
R6159:6164 Equiv <> cequiv def
R6186:6186 Equiv <> c var
R6172:6175 Imp <> ::x_';;'_x not
R6171:6171 Equiv <> c var
R6176:6179 Imp <> ::'SKIP' not
prf 6333:6347 <> IFB_true_simple
R6366:6371 Equiv <> cequiv def
R6412:6413 Equiv <> c1 var
R6378:6381 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6387:6392 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6395:6400 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6403:6405 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6382:6386 Imp <> BTrue constr
R6393:6394 Equiv <> c1 var
R6401:6402 Equiv <> c2 var
R6544:6551 Imp <> E_IfTrue constr
R6544:6551 Imp <> E_IfTrue constr
prf 8462:8469 <> IFB_true
R8507:8516 Coq.Init.Logic <> :type_scope:x_'->'_x not
R8517:8522 Equiv <> cequiv def
R8565:8566 Equiv <> c1 var
R8532:8535 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8537:8542 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8545:8550 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8553:8555 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8536:8536 Equiv <> b var
R8543:8544 Equiv <> c1 var
R8551:8552 Equiv <> c2 var
R8493:8498 Equiv <> bequiv def
R8502:8506 Imp <> BTrue constr
R8500:8500 Equiv <> b var
R8765:8770 Equiv <> bequiv def
R8859:8866 Imp <> E_IfTrue constr
R8859:8866 Imp <> E_IfTrue constr
R8896:8901 Equiv <> bequiv def
prf 9023:9031 <> IFB_false
R9067:9073 Coq.Init.Logic <> :type_scope:x_'->'_x not
R9074:9079 Equiv <> cequiv def
R9116:9117 Equiv <> c2 var
R9086:9089 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9091:9096 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9099:9104 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9107:9109 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9090:9090 Equiv <> b var
R9097:9098 Equiv <> c1 var
R9105:9106 Equiv <> c2 var
R9052:9057 Equiv <> bequiv def
R9061:9066 Imp <> BFalse constr
R9059:9059 Equiv <> b var
prf 9309:9324 <> swap_if_branches
R9345:9350 Equiv <> cequiv def
R9388:9391 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9398:9403 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9406:9411 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9414:9416 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9392:9395 Imp <> BNot constr
R9397:9397 Equiv <> b var
R9404:9405 Equiv <> e2 var
R9412:9413 Equiv <> e1 var
R9357:9360 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9362:9367 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9370:9375 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9378:9380 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9361:9361 Equiv <> b var
R9368:9369 Equiv <> e1 var
R9376:9377 Equiv <> e2 var
prf 9798:9808 <> WHILE_false
R9844:9852 Coq.Init.Logic <> :type_scope:x_'->'_x not
R9853:9858 Equiv <> cequiv def
R9893:9896 Imp <> ::'SKIP' not
R9868:9873 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R9875:9878 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R9880:9883 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R9874:9874 Equiv <> b var
R9879:9879 Equiv <> c var
R9829:9834 Equiv <> bequiv def
R9838:9843 Imp <> BFalse constr
R9836:9836 Equiv <> b var
R10012:10017 Imp <> E_Skip constr
R10012:10017 Imp <> E_Skip constr
R10129:10138 Imp <> E_WhileEnd constr
R10129:10138 Imp <> E_WhileEnd constr
prf 11466:11483 <> WHILE_true_nonterm
R11525:11533 Coq.Init.Logic <> :type_scope:x_'->'_x not
R11534:11536 Coq.Init.Logic <> :type_scope:'~'_x not
R11567:11568 Coq.Init.Logic <> :type_scope:'~'_x not
R11537:11537 Imp <> ::x_'/'_x_'\\'_x not
R11554:11557 Imp <> ::x_'/'_x_'\\'_x not
R11560:11563 Imp <> ::x_'/'_x_'\\'_x not
R11538:11543 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11545:11548 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11550:11553 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11544:11544 Equiv <> b var
R11549:11549 Equiv <> c var
R11558:11559 Equiv <> st var
R11564:11566 Equiv <> st' var
R11511:11516 Equiv <> bequiv def
R11520:11524 Imp <> BTrue constr
R11518:11518 Equiv <> b var
R11650:11655 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11657:11660 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11662:11665 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11650:11655 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11657:11660 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11662:11665 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11957:11962 Equiv <> bequiv def
prf 12492:12501 <> WHILE_true
R12535:12544 Coq.Init.Logic <> :type_scope:x_'->'_x not
R12545:12550 Equiv <> cequiv def
R12586:12591 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12597:12600 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12605:12608 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12592:12596 Imp <> BTrue constr
R12601:12604 Imp <> ::'SKIP' not
R12560:12565 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12567:12570 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12572:12575 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12566:12566 Equiv <> b var
R12571:12571 Equiv <> c var
R12521:12526 Equiv <> bequiv def
R12530:12534 Imp <> BTrue constr
R12528:12528 Equiv <> b var
prf 12669:12682 <> loop_unrolling
R12699:12704 Equiv <> cequiv def
R12734:12737 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12739:12745 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12766:12772 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12777:12779 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12738:12738 Equiv <> b var
R12747:12749 Imp <> ::x_';;'_x not
R12746:12746 Equiv <> c var
R12750:12755 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12757:12760 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12762:12765 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12756:12756 Equiv <> b var
R12761:12761 Equiv <> c var
R12773:12776 Imp <> ::'SKIP' not
R12711:12716 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12718:12721 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12723:12726 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12717:12717 Equiv <> b var
R12722:12722 Equiv <> c var
R12936:12944 Imp <> E_IfFalse constr
R12936:12944 Imp <> E_IfFalse constr
R12965:12970 Imp <> E_Skip constr
R12965:12970 Imp <> E_Skip constr
R13007:13014 Imp <> E_IfTrue constr
R13007:13014 Imp <> E_IfTrue constr
R13041:13045 Imp <> E_Seq constr
R13041:13045 Imp <> E_Seq constr
R13191:13201 Imp <> E_WhileLoop constr
R13191:13201 Imp <> E_WhileLoop constr
R13327:13336 Imp <> E_WhileEnd constr
R13327:13336 Imp <> E_WhileEnd constr
prf 13419:13427 <> seq_assoc
R13450:13455 Equiv <> cequiv def
R13475:13477 Imp <> ::x_';;'_x not
R13484:13484 Imp <> ::x_';;'_x not
R13473:13474 Equiv <> c1 var
R13480:13481 Imp <> ::x_';;'_x not
R13478:13479 Equiv <> c2 var
R13482:13483 Equiv <> c3 var
R13458:13458 Imp <> ::x_';;'_x not
R13465:13467 Imp <> ::x_';;'_x not
R13461:13462 Imp <> ::x_';;'_x not
R13459:13460 Equiv <> c1 var
R13463:13464 Equiv <> c2 var
R13468:13469 Equiv <> c3 var
prf 13763:13781 <> identity_assignment
R13795:13796 Maps <> id ind
R13802:13807 Equiv <> cequiv def
R13831:13834 Imp <> ::'SKIP' not
R13815:13819 Imp <> ::x_'::='_x not
R13814:13814 Equiv <> X var
R13820:13822 Imp <> AId constr
R13824:13824 Equiv <> X var
R13937:13944 Maps <> t_update def
R13937:13944 Maps <> t_update def
R14005:14029 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R14005:14029 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R14056:14068 Maps <> t_update_same prfax
R14056:14068 Maps <> t_update_same prfax
R14056:14068 Maps <> t_update_same prfax
R14125:14132 Maps <> t_update def
R14141:14145 Imp <> aeval def
R14152:14154 Imp <> AId constr
R14125:14132 Maps <> t_update def
R14141:14145 Imp <> aeval def
R14152:14154 Imp <> AId constr
R14197:14201 Imp <> E_Ass constr
R14197:14201 Imp <> E_Ass constr
R14232:14256 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R14232:14256 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R14283:14295 Maps <> t_update_same prfax
R14283:14295 Maps <> t_update_same prfax
R14283:14295 Maps <> t_update_same prfax
prf 14385:14397 <> assign_aequiv
R14431:14436 Coq.Init.Logic <> :type_scope:x_'->'_x not
R14437:14442 Equiv <> cequiv def
R14451:14455 Imp <> ::x_'::='_x not
R14450:14450 Equiv <> X var
R14456:14456 Equiv <> e var
R14444:14447 Imp <> ::'SKIP' not
R14415:14420 Equiv <> aequiv def
R14430:14430 Equiv <> e var
R14423:14425 Imp <> AId constr
R14427:14427 Equiv <> X var
prf 15064:15074 <> refl_aequiv
R15090:15093 Imp <> aexp ind
R15097:15102 Equiv <> aequiv def
R15106:15106 Equiv <> a var
R15104:15104 Equiv <> a var
prf 15157:15166 <> sym_aequiv
R15186:15189 Imp <> aexp ind
R15207:15210 Coq.Init.Logic <> :type_scope:x_'->'_x not
R15211:15216 Equiv <> aequiv def
R15221:15222 Equiv <> a1 var
R15218:15219 Equiv <> a2 var
R15195:15200 Equiv <> aequiv def
R15205:15206 Equiv <> a2 var
R15202:15203 Equiv <> a1 var
prf 15293:15304 <> trans_aequiv
R15327:15330 Imp <> aexp ind
R15348:15351 Coq.Init.Logic <> :type_scope:x_'->'_x not
R15364:15367 Coq.Init.Logic <> :type_scope:x_'->'_x not
R15368:15373 Equiv <> aequiv def
R15378:15379 Equiv <> a3 var
R15375:15376 Equiv <> a1 var
R15352:15357 Equiv <> aequiv def
R15362:15363 Equiv <> a3 var
R15359:15360 Equiv <> a2 var
R15336:15341 Equiv <> aequiv def
R15346:15347 Equiv <> a2 var
R15343:15344 Equiv <> a1 var
R15398:15403 Equiv <> aequiv def
prf 15498:15508 <> refl_bequiv
R15524:15527 Imp <> bexp ind
R15531:15536 Equiv <> bequiv def
R15540:15540 Equiv <> b var
R15538:15538 Equiv <> b var
R15559:15564 Equiv <> bequiv def
prf 15606:15615 <> sym_bequiv
R15635:15638 Imp <> bexp ind
R15656:15659 Coq.Init.Logic <> :type_scope:x_'->'_x not
R15660:15665 Equiv <> bequiv def
R15670:15671 Equiv <> b1 var
R15667:15668 Equiv <> b2 var
R15644:15649 Equiv <> bequiv def
R15654:15655 Equiv <> b2 var
R15651:15652 Equiv <> b1 var
R15690:15695 Equiv <> bequiv def
prf 15757:15768 <> trans_bequiv
R15791:15794 Imp <> bexp ind
R15812:15815 Coq.Init.Logic <> :type_scope:x_'->'_x not
R15828:15831 Coq.Init.Logic <> :type_scope:x_'->'_x not
R15832:15837 Equiv <> bequiv def
R15842:15843 Equiv <> b3 var
R15839:15840 Equiv <> b1 var
R15816:15821 Equiv <> bequiv def
R15826:15827 Equiv <> b3 var
R15823:15824 Equiv <> b2 var
R15800:15805 Equiv <> bequiv def
R15810:15811 Equiv <> b2 var
R15807:15808 Equiv <> b1 var
R15862:15867 Equiv <> bequiv def
prf 15962:15972 <> refl_cequiv
R15988:15990 Imp <> com ind
R15994:15999 Equiv <> cequiv def
R16003:16003 Equiv <> c var
R16001:16001 Equiv <> c var
R16022:16027 Equiv <> cequiv def
R16053:16060 Coq.Init.Logic <> iff_refl thm
R16053:16060 Coq.Init.Logic <> iff_refl thm
prf 16076:16085 <> sym_cequiv
R16105:16107 Imp <> com ind
R16125:16128 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16129:16134 Equiv <> cequiv def
R16139:16140 Equiv <> c1 var
R16136:16137 Equiv <> c2 var
R16113:16118 Equiv <> cequiv def
R16123:16124 Equiv <> c2 var
R16120:16121 Equiv <> c1 var
R16159:16164 Equiv <> cequiv def
R16214:16218 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R16202:16204 Imp <> ::x_'/'_x_'\\'_x not
R16207:16210 Imp <> ::x_'/'_x_'\\'_x not
R16221:16223 Imp <> ::x_'/'_x_'\\'_x not
R16226:16229 Imp <> ::x_'/'_x_'\\'_x not
R16214:16218 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R16202:16204 Imp <> ::x_'/'_x_'\\'_x not
R16207:16210 Imp <> ::x_'/'_x_'\\'_x not
R16221:16223 Imp <> ::x_'/'_x_'\\'_x not
R16226:16229 Imp <> ::x_'/'_x_'\\'_x not
R16290:16296 Coq.Init.Logic <> iff_sym thm
R16290:16296 Coq.Init.Logic <> iff_sym thm
prf 16323:16331 <> iff_trans
R16363:16363 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16373:16377 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16378:16378 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16388:16393 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16403:16403 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16396:16400 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R16394:16395 Equiv <> P1 var
R16401:16402 Equiv <> P3 var
R16381:16385 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R16379:16380 Equiv <> P2 var
R16386:16387 Equiv <> P3 var
R16366:16370 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R16364:16365 Equiv <> P1 var
R16371:16372 Equiv <> P2 var
prf 16569:16580 <> trans_cequiv
R16603:16605 Imp <> com ind
R16623:16626 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16639:16642 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16643:16648 Equiv <> cequiv def
R16653:16654 Equiv <> c3 var
R16650:16651 Equiv <> c1 var
R16627:16632 Equiv <> cequiv def
R16637:16638 Equiv <> c3 var
R16634:16635 Equiv <> c2 var
R16611:16616 Equiv <> cequiv def
R16621:16622 Equiv <> c2 var
R16618:16619 Equiv <> c1 var
R16673:16678 Equiv <> cequiv def
R16739:16741 Imp <> ::x_'/'_x_'\\'_x not
R16744:16747 Imp <> ::x_'/'_x_'\\'_x not
R16721:16729 Equiv <> iff_trans thm
R16739:16741 Imp <> ::x_'/'_x_'\\'_x not
R16744:16747 Imp <> ::x_'/'_x_'\\'_x not
R16721:16729 Equiv <> iff_trans thm
prf 18141:18155 <> CAss_congruence
R18191:18196 Coq.Init.Logic <> :type_scope:x_'->'_x not
R18197:18202 Equiv <> cequiv def
R18217:18220 Imp <> CAss constr
R18224:18226 Equiv <> a1' var
R18222:18222 Equiv <> i var
R18205:18208 Imp <> CAss constr
R18212:18213 Equiv <> a1 var
R18210:18210 Equiv <> i var
R18178:18183 Equiv <> aequiv def
R18188:18190 Equiv <> a1' var
R18185:18186 Equiv <> a1 var
R18339:18343 Imp <> E_Ass constr
R18339:18343 Imp <> E_Ass constr
R18425:18429 Imp <> E_Ass constr
R18425:18429 Imp <> E_Ass constr
prf 20281:20297 <> CWhile_congruence
R20338:20341 Coq.Init.Logic <> :type_scope:x_'->'_x not
R20355:20360 Coq.Init.Logic <> :type_scope:x_'->'_x not
R20361:20366 Equiv <> cequiv def
R20390:20395 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20399:20402 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20406:20409 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20396:20398 Equiv <> b1' var
R20403:20405 Equiv <> c1' var
R20369:20374 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20377:20380 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20383:20386 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20375:20376 Equiv <> b1 var
R20381:20382 Equiv <> c1 var
R20342:20347 Equiv <> cequiv def
R20352:20354 Equiv <> c1' var
R20349:20350 Equiv <> c1 var
R20325:20330 Equiv <> bequiv def
R20335:20337 Equiv <> b1' var
R20332:20333 Equiv <> b1 var
R20453:20458 Equiv <> bequiv def
R20460:20465 Equiv <> cequiv def
R20557:20562 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20565:20568 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20571:20574 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20557:20562 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20565:20568 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20571:20574 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20690:20699 Imp <> E_WhileEnd constr
R20690:20699 Imp <> E_WhileEnd constr
R20764:20774 Imp <> E_WhileLoop constr
R20764:20774 Imp <> E_WhileLoop constr
R21023:21028 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R21032:21035 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R21039:21042 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R21023:21028 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R21032:21035 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R21039:21042 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R21161:21170 Imp <> E_WhileEnd constr
R21161:21170 Imp <> E_WhileEnd constr
R21235:21245 Imp <> E_WhileLoop constr
R21235:21245 Imp <> E_WhileLoop constr
prf 21541:21555 <> CSeq_congruence
R21596:21599 Coq.Init.Logic <> :type_scope:x_'->'_x not
R21613:21618 Coq.Init.Logic <> :type_scope:x_'->'_x not
R21619:21624 Equiv <> cequiv def
R21639:21640 Imp <> ::x_';;'_x not
R21636:21638 Equiv <> c1' var
R21641:21643 Equiv <> c2' var
R21629:21630 Imp <> ::x_';;'_x not
R21627:21628 Equiv <> c1 var
R21631:21632 Equiv <> c2 var
R21600:21605 Equiv <> cequiv def
R21610:21612 Equiv <> c2' var
R21607:21608 Equiv <> c2 var
R21583:21588 Equiv <> cequiv def
R21593:21595 Equiv <> c1' var
R21590:21591 Equiv <> c1 var
prf 21752:21765 <> CIf_congruence
R21809:21812 Coq.Init.Logic <> :type_scope:x_'->'_x not
R21826:21829 Coq.Init.Logic <> :type_scope:x_'->'_x not
R21843:21848 Coq.Init.Logic <> :type_scope:x_'->'_x not
R21849:21854 Equiv <> cequiv def
R21893:21896 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R21899:21904 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R21908:21913 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R21917:21919 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R21897:21898 Equiv <> b' var
R21905:21907 Equiv <> c1' var
R21914:21916 Equiv <> c2' var
R21857:21860 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R21862:21867 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R21870:21875 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R21878:21880 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R21861:21861 Equiv <> b var
R21868:21869 Equiv <> c1 var
R21876:21877 Equiv <> c2 var
R21830:21835 Equiv <> cequiv def
R21840:21842 Equiv <> c2' var
R21837:21838 Equiv <> c2 var
R21813:21818 Equiv <> cequiv def
R21823:21825 Equiv <> c1' var
R21820:21821 Equiv <> c1 var
R21798:21803 Equiv <> bequiv def
R21807:21808 Equiv <> b' var
R21805:21805 Equiv <> b var
def 22074:22091 <> congruence_example
R22096:22101 Equiv <> cequiv def
R22284:22291 Imp <> ::x_';;'_x not
R22273:22277 Imp <> ::x_'::='_x not
R22272:22272 Imp <> X def
R22278:22281 Imp <> ANum constr
R22292:22296 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22317:22335 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22364:22407 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22421:22428 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22297:22299 Imp <> BEq constr
R22310:22313 Imp <> ANum constr
R22302:22304 Imp <> AId constr
R22306:22306 Imp <> X def
R22337:22341 Imp <> ::x_'::='_x not
R22336:22336 Imp <> Y def
R22342:22347 Imp <> AMinus constr
R22358:22360 Imp <> AId constr
R22362:22362 Imp <> X def
R22350:22352 Imp <> AId constr
R22354:22354 Imp <> X def
R22409:22413 Imp <> ::x_'::='_x not
R22408:22408 Imp <> Y def
R22414:22417 Imp <> ANum constr
R22141:22148 Imp <> ::x_';;'_x not
R22130:22134 Imp <> ::x_'::='_x not
R22129:22129 Imp <> X def
R22135:22138 Imp <> ANum constr
R22149:22153 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22174:22192 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22205:22222 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22236:22243 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22154:22156 Imp <> BEq constr
R22167:22170 Imp <> ANum constr
R22159:22161 Imp <> AId constr
R22163:22163 Imp <> X def
R22194:22198 Imp <> ::x_'::='_x not
R22193:22193 Imp <> Y def
R22199:22202 Imp <> ANum constr
R22224:22228 Imp <> ::x_'::='_x not
R22223:22223 Imp <> Y def
R22229:22232 Imp <> ANum constr
R22447:22461 Equiv <> CSeq_congruence prfax
R22447:22461 Equiv <> CSeq_congruence prfax
R22474:22484 Equiv <> refl_cequiv thm
R22474:22484 Equiv <> refl_cequiv thm
R22497:22510 Equiv <> CIf_congruence prfax
R22497:22510 Equiv <> CIf_congruence prfax
R22525:22535 Equiv <> refl_bequiv thm
R22525:22535 Equiv <> refl_bequiv thm
R22550:22564 Equiv <> CAss_congruence thm
R22550:22564 Equiv <> CAss_congruence thm
R22574:22579 Equiv <> aequiv def
R22613:22622 Coq.Arith.Minus <> minus_diag syndef
R22613:22622 Coq.Arith.Minus <> minus_diag syndef
R22637:22647 Equiv <> refl_cequiv thm
R22637:22647 Equiv <> refl_cequiv thm
def 23118:23129 <> atrans_sound
R23145:23148 Coq.Init.Logic <> :type_scope:x_'->'_x not
R23149:23152 Imp <> aexp ind
R23141:23144 Imp <> aexp ind
R23179:23182 Imp <> aexp ind
R23190:23195 Equiv <> aequiv def
R23200:23205 Equiv <> atrans var
R23207:23207 Equiv <> a var
R23197:23197 Equiv <> a var
def 23223:23234 <> btrans_sound
R23250:23253 Coq.Init.Logic <> :type_scope:x_'->'_x not
R23254:23257 Imp <> bexp ind
R23246:23249 Imp <> bexp ind
R23284:23287 Imp <> bexp ind
R23295:23300 Equiv <> bequiv def
R23305:23310 Equiv <> btrans var
R23312:23312 Equiv <> b var
R23302:23302 Equiv <> b var
def 23328:23339 <> ctrans_sound
R23354:23357 Coq.Init.Logic <> :type_scope:x_'->'_x not
R23358:23360 Imp <> com ind
R23351:23353 Imp <> com ind
R23387:23389 Imp <> com ind
R23397:23402 Equiv <> cequiv def
R23407:23412 Equiv <> ctrans var
R23414:23414 Equiv <> c var
R23404:23404 Equiv <> c var
def 23740:23758 <> fold_constants_aexp
R23765:23768 Imp <> aexp ind
R23773:23776 Imp <> aexp ind
R23789:23789 Equiv <> a var
R23800:23803 Imp <> ANum constr
R23816:23819 Imp <> ANum constr
R23827:23829 Imp <> AId constr
R23843:23845 Imp <> AId constr
R23853:23857 Imp <> APlus constr
R23879:23879 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23902:23903 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23926:23926 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23880:23898 Equiv <> fold_constants_aexp def
R23904:23922 Equiv <> fold_constants_aexp def
R23943:23943 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23951:23952 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23960:23960 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23944:23947 Imp <> ANum constr
R23953:23956 Imp <> ANum constr
R23965:23968 Imp <> ANum constr
R23973:23975 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R23986:23986 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23990:23991 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23995:23995 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24000:24004 Imp <> APlus constr
R24026:24031 Imp <> AMinus constr
R24052:24052 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24075:24076 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24099:24099 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24053:24071 Equiv <> fold_constants_aexp def
R24077:24095 Equiv <> fold_constants_aexp def
R24116:24116 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24124:24125 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24133:24133 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24117:24120 Imp <> ANum constr
R24126:24129 Imp <> ANum constr
R24138:24141 Imp <> ANum constr
R24146:24148 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R24159:24159 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24163:24164 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24168:24168 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24173:24178 Imp <> AMinus constr
R24200:24204 Imp <> AMult constr
R24226:24226 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24249:24250 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24273:24273 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24227:24245 Equiv <> fold_constants_aexp def
R24251:24269 Equiv <> fold_constants_aexp def
R24290:24290 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24298:24299 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24307:24307 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24291:24294 Imp <> ANum constr
R24300:24303 Imp <> ANum constr
R24312:24315 Imp <> ANum constr
R24320:24322 Coq.Init.Peano <> :nat_scope:x_'*'_x not
R24333:24333 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24337:24338 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24342:24342 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24347:24351 Imp <> AMult constr
def 24385:24397 <> fold_aexp_ex1
R24472:24476 Coq.Init.Logic <> :type_scope:x_'='_x not
R24405:24423 Equiv <> fold_constants_aexp def
R24432:24436 Imp <> AMult constr
R24465:24467 Imp <> AId constr
R24469:24469 Imp <> X def
R24439:24443 Imp <> APlus constr
R24455:24458 Imp <> ANum constr
R24446:24449 Imp <> ANum constr
R24477:24481 Imp <> AMult constr
R24493:24495 Imp <> AId constr
R24497:24497 Imp <> X def
R24484:24487 Imp <> ANum constr
def 24840:24852 <> fold_aexp_ex2
R24973:24977 Coq.Init.Logic <> :type_scope:x_'='_x not
R24860:24878 Equiv <> fold_constants_aexp def
R24887:24892 Imp <> AMinus constr
R24903:24907 Imp <> APlus constr
R24965:24967 Imp <> AId constr
R24969:24969 Imp <> Y def
R24910:24914 Imp <> AMult constr
R24926:24929 Imp <> ANum constr
R24917:24920 Imp <> ANum constr
R24895:24897 Imp <> AId constr
R24899:24899 Imp <> X def
R24978:24983 Imp <> AMinus constr
R24994:24998 Imp <> APlus constr
R25010:25012 Imp <> AId constr
R25014:25014 Imp <> Y def
R25001:25004 Imp <> ANum constr
R24986:24988 Imp <> AId constr
R24990:24990 Imp <> X def
def 25232:25250 <> fold_constants_bexp
R25257:25260 Imp <> bexp ind
R25265:25268 Imp <> bexp ind
R25281:25281 Equiv <> b var
R25292:25296 Imp <> BTrue constr
R25308:25312 Imp <> BTrue constr
R25318:25323 Imp <> BFalse constr
R25334:25339 Imp <> BFalse constr
R25345:25347 Imp <> BEq constr
R25369:25369 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25392:25393 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25416:25416 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25370:25388 Equiv <> fold_constants_aexp def
R25394:25412 Equiv <> fold_constants_aexp def
R25433:25433 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25441:25442 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25450:25450 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25434:25437 Imp <> ANum constr
R25443:25446 Imp <> ANum constr
R25466:25472 Coq.Arith.EqNat <> beq_nat syndef
R25496:25501 Imp <> BFalse constr
R25485:25489 Imp <> BTrue constr
R25509:25509 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25513:25514 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25518:25518 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25531:25533 Imp <> BEq constr
R25555:25557 Imp <> BLe constr
R25579:25579 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25602:25603 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25626:25626 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25580:25598 Equiv <> fold_constants_aexp def
R25604:25622 Equiv <> fold_constants_aexp def
R25643:25643 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25651:25652 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25660:25660 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25644:25647 Imp <> ANum constr
R25653:25656 Imp <> ANum constr
R25676:25678 Coq.Arith.Compare_dec <> leb syndef
R25702:25707 Imp <> BFalse constr
R25691:25695 Imp <> BTrue constr
R25715:25715 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25719:25720 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25724:25724 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25737:25739 Imp <> BLe constr
R25761:25764 Imp <> BNot constr
R25784:25802 Equiv <> fold_constants_bexp def
R25819:25823 Imp <> BTrue constr
R25828:25833 Imp <> BFalse constr
R25841:25846 Imp <> BFalse constr
R25851:25855 Imp <> BTrue constr
R25870:25873 Imp <> BNot constr
R25891:25894 Imp <> BAnd constr
R25916:25916 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25939:25940 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25963:25963 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25917:25935 Equiv <> fold_constants_bexp def
R25941:25959 Equiv <> fold_constants_bexp def
R25980:25980 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25986:25987 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25993:25993 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25981:25985 Imp <> BTrue constr
R25988:25992 Imp <> BTrue constr
R25998:26002 Imp <> BTrue constr
R26010:26010 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26016:26017 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26024:26024 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26011:26015 Imp <> BTrue constr
R26018:26023 Imp <> BFalse constr
R26029:26034 Imp <> BFalse constr
R26042:26042 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26049:26050 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26056:26056 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26043:26048 Imp <> BFalse constr
R26051:26055 Imp <> BTrue constr
R26061:26066 Imp <> BFalse constr
R26074:26074 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26081:26082 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26089:26089 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26075:26080 Imp <> BFalse constr
R26083:26088 Imp <> BFalse constr
R26094:26099 Imp <> BFalse constr
R26107:26107 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26111:26112 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26116:26116 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26121:26124 Imp <> BAnd constr
def 26158:26170 <> fold_bexp_ex1
R26237:26241 Coq.Init.Logic <> :type_scope:x_'='_x not
R26178:26196 Equiv <> fold_constants_bexp def
R26199:26202 Imp <> BAnd constr
R26211:26214 Imp <> BNot constr
R26217:26220 Imp <> BAnd constr
R26229:26233 Imp <> BTrue constr
R26222:26227 Imp <> BFalse constr
R26204:26208 Imp <> BTrue constr
R26242:26246 Imp <> BTrue constr
def 26283:26295 <> fold_bexp_ex2
R26486:26490 Coq.Init.Logic <> :type_scope:x_'='_x not
R26303:26321 Equiv <> fold_constants_bexp def
R26330:26333 Imp <> BAnd constr
R26370:26372 Imp <> BEq constr
R26401:26406 Imp <> AMinus constr
R26418:26422 Imp <> APlus constr
R26475:26478 Imp <> ANum constr
R26425:26428 Imp <> ANum constr
R26409:26412 Imp <> ANum constr
R26375:26378 Imp <> ANum constr
R26336:26338 Imp <> BEq constr
R26349:26351 Imp <> AId constr
R26353:26353 Imp <> Y def
R26341:26343 Imp <> AId constr
R26345:26345 Imp <> X def
R26491:26494 Imp <> BAnd constr
R26518:26522 Imp <> BTrue constr
R26497:26499 Imp <> BEq constr
R26510:26512 Imp <> AId constr
R26514:26514 Imp <> Y def
R26502:26504 Imp <> AId constr
R26506:26506 Imp <> X def
def 26676:26693 <> fold_constants_com
R26700:26702 Imp <> com ind
R26707:26709 Imp <> com ind
R26722:26722 Equiv <> c var
R26733:26736 Imp <> ::'SKIP' not
R26752:26755 Imp <> ::'SKIP' not
R26762:26766 Imp <> ::x_'::='_x not
R26779:26782 Imp <> CAss constr
R26787:26805 Equiv <> fold_constants_aexp def
R26816:26819 Imp <> ::x_';;'_x not
R26833:26833 Imp <> ::x_';;'_x not
R26855:26860 Imp <> ::x_';;'_x not
R26882:26882 Imp <> ::x_';;'_x not
R26834:26851 Equiv <> fold_constants_com def
R26861:26878 Equiv <> fold_constants_com def
R26888:26891 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26893:26898 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26901:26906 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26909:26911 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26928:26946 Equiv <> fold_constants_bexp def
R26963:26967 Imp <> BTrue constr
R26972:26989 Equiv <> fold_constants_com def
R27002:27007 Imp <> BFalse constr
R27012:27029 Equiv <> fold_constants_com def
R27048:27051 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27054:27059 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27081:27107 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27129:27131 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27060:27077 Equiv <> fold_constants_com def
R27108:27125 Equiv <> fold_constants_com def
R27147:27152 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27154:27157 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27159:27162 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27179:27197 Equiv <> fold_constants_bexp def
R27214:27218 Imp <> BTrue constr
R27223:27228 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27234:27237 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27242:27245 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27229:27233 Imp <> BTrue constr
R27238:27241 Imp <> ::'SKIP' not
R27255:27260 Imp <> BFalse constr
R27265:27268 Imp <> ::'SKIP' not
R27284:27289 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27292:27296 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27317:27321 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27297:27314 Equiv <> fold_constants_com def
R27316:27316 Equiv <> c var
def 27349:27360 <> fold_com_ex1
R27843:27882 Coq.Init.Logic <> :type_scope:x_'='_x not
R28140:28140 Coq.Init.Logic <> :type_scope:x_'='_x not
R27366:27383 Equiv <> fold_constants_com def
R27447:27454 Imp <> ::x_';;'_x not
R27419:27423 Imp <> ::x_'::='_x not
R27418:27418 Imp <> X def
R27424:27428 Imp <> APlus constr
R27440:27443 Imp <> ANum constr
R27431:27434 Imp <> ANum constr
R27484:27491 Imp <> ::x_';;'_x not
R27456:27460 Imp <> ::x_'::='_x not
R27455:27455 Imp <> Y def
R27461:27466 Imp <> AMinus constr
R27477:27480 Imp <> ANum constr
R27469:27471 Imp <> AId constr
R27473:27473 Imp <> X def
R27618:27625 Imp <> ::x_';;'_x not
R27492:27495 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27563:27575 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27580:27597 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27610:27617 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27496:27498 Imp <> BEq constr
R27539:27543 Imp <> APlus constr
R27555:27558 Imp <> ANum constr
R27546:27549 Imp <> ANum constr
R27501:27506 Imp <> AMinus constr
R27517:27519 Imp <> AId constr
R27521:27521 Imp <> Y def
R27509:27511 Imp <> AId constr
R27513:27513 Imp <> X def
R27576:27579 Imp <> ::'SKIP' not
R27599:27603 Imp <> ::x_'::='_x not
R27598:27598 Imp <> Y def
R27604:27607 Imp <> ANum constr
R27760:27767 Imp <> ::x_';;'_x not
R27626:27629 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27699:27717 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27730:27747 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27752:27759 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27630:27632 Imp <> BLe constr
R27657:27662 Imp <> AMinus constr
R27674:27678 Imp <> APlus constr
R27690:27693 Imp <> ANum constr
R27681:27684 Imp <> ANum constr
R27665:27668 Imp <> ANum constr
R27635:27638 Imp <> ANum constr
R27719:27723 Imp <> ::x_'::='_x not
R27718:27718 Imp <> Y def
R27724:27727 Imp <> ANum constr
R27748:27751 Imp <> ::'SKIP' not
R27768:27773 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27794:27804 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27833:27841 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27774:27776 Imp <> BEq constr
R27787:27790 Imp <> ANum constr
R27779:27781 Imp <> AId constr
R27783:27783 Imp <> Y def
R27806:27810 Imp <> ::x_'::='_x not
R27805:27805 Imp <> X def
R27811:27815 Imp <> APlus constr
R27826:27829 Imp <> ANum constr
R27818:27820 Imp <> AId constr
R27822:27822 Imp <> X def
R27895:27902 Imp <> ::x_';;'_x not
R27884:27888 Imp <> ::x_'::='_x not
R27883:27883 Imp <> X def
R27889:27892 Imp <> ANum constr
R27932:27939 Imp <> ::x_';;'_x not
R27904:27908 Imp <> ::x_'::='_x not
R27903:27903 Imp <> Y def
R27909:27914 Imp <> AMinus constr
R27925:27928 Imp <> ANum constr
R27917:27919 Imp <> AId constr
R27921:27921 Imp <> X def
R28038:28045 Imp <> ::x_';;'_x not
R27940:27943 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27981:27993 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27998:28016 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28029:28037 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27944:27946 Imp <> BEq constr
R27974:27977 Imp <> ANum constr
R27949:27954 Imp <> AMinus constr
R27965:27967 Imp <> AId constr
R27969:27969 Imp <> Y def
R27957:27959 Imp <> AId constr
R27961:27961 Imp <> X def
R27994:27997 Imp <> ::'SKIP' not
R28018:28022 Imp <> ::x_'::='_x not
R28017:28017 Imp <> Y def
R28023:28026 Imp <> ANum constr
R28058:28065 Imp <> ::x_';;'_x not
R28047:28051 Imp <> ::x_'::='_x not
R28046:28046 Imp <> Y def
R28052:28055 Imp <> ANum constr
R28066:28071 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R28092:28102 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R28131:28139 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R28072:28074 Imp <> BEq constr
R28085:28088 Imp <> ANum constr
R28077:28079 Imp <> AId constr
R28081:28081 Imp <> Y def
R28104:28108 Imp <> ::x_'::='_x not
R28103:28103 Imp <> X def
R28109:28113 Imp <> APlus constr
R28124:28127 Imp <> ANum constr
R28116:28118 Imp <> AId constr
R28120:28120 Imp <> X def
prf 28404:28428 <> fold_constants_aexp_sound
R28434:28445 Equiv <> atrans_sound def
R28447:28465 Equiv <> fold_constants_aexp def
R28484:28495 Equiv <> atrans_sound def
R28515:28520 Equiv <> aequiv def
R28929:28947 Equiv <> fold_constants_aexp def
R28973:28991 Equiv <> fold_constants_aexp def
R28929:28947 Equiv <> fold_constants_aexp def
R28973:28991 Equiv <> fold_constants_aexp def
R28973:28991 Equiv <> fold_constants_aexp def
R28973:28991 Equiv <> fold_constants_aexp def
R28973:28991 Equiv <> fold_constants_aexp def
R28973:28991 Equiv <> fold_constants_aexp def
R28929:28947 Equiv <> fold_constants_aexp def
R28973:28991 Equiv <> fold_constants_aexp def
R28973:28991 Equiv <> fold_constants_aexp def
R28973:28991 Equiv <> fold_constants_aexp def
R28973:28991 Equiv <> fold_constants_aexp def
R28973:28991 Equiv <> fold_constants_aexp def
R28929:28947 Equiv <> fold_constants_aexp def
R28973:28991 Equiv <> fold_constants_aexp def
R28973:28991 Equiv <> fold_constants_aexp def
R28973:28991 Equiv <> fold_constants_aexp def
R28973:28991 Equiv <> fold_constants_aexp def
R28973:28991 Equiv <> fold_constants_aexp def
prf 31935:31959 <> fold_constants_bexp_sound
R31964:31975 Equiv <> btrans_sound def
R31977:31995 Equiv <> fold_constants_bexp def
R32014:32025 Equiv <> btrans_sound def
R32045:32050 Equiv <> bequiv def
R32549:32567 Equiv <> fold_constants_aexp def
R32549:32567 Equiv <> fold_constants_aexp def
R32606:32624 Equiv <> fold_constants_aexp def
R32606:32624 Equiv <> fold_constants_aexp def
R32662:32666 Imp <> aeval def
R32681:32685 Imp <> aeval def
R32728:32752 Equiv <> fold_constants_aexp_sound thm
R32681:32685 Imp <> aeval def
R32662:32666 Imp <> aeval def
R32728:32752 Equiv <> fold_constants_aexp_sound thm
R32728:32752 Equiv <> fold_constants_aexp_sound thm
R32782:32786 Imp <> aeval def
R32801:32805 Imp <> aeval def
R32848:32872 Equiv <> fold_constants_aexp_sound thm
R32801:32805 Imp <> aeval def
R32782:32786 Imp <> aeval def
R32848:32872 Equiv <> fold_constants_aexp_sound thm
R32848:32872 Equiv <> fold_constants_aexp_sound thm
R33066:33072 Coq.Arith.EqNat <> beq_nat syndef
R33066:33072 Coq.Arith.EqNat <> beq_nat syndef
R33174:33192 Equiv <> fold_constants_bexp def
R33174:33192 Equiv <> fold_constants_bexp def
R33301:33319 Equiv <> fold_constants_bexp def
R33301:33319 Equiv <> fold_constants_bexp def
R33358:33376 Equiv <> fold_constants_bexp def
R33358:33376 Equiv <> fold_constants_bexp def
prf 33642:33665 <> fold_constants_com_sound
R33671:33682 Equiv <> ctrans_sound def
R33684:33701 Equiv <> fold_constants_com def
R33720:33731 Equiv <> ctrans_sound def
R33787:33797 Equiv <> refl_cequiv thm
R33787:33797 Equiv <> refl_cequiv thm
R33820:33834 Equiv <> CAss_congruence thm
R33820:33834 Equiv <> CAss_congruence thm
R33857:33881 Equiv <> fold_constants_aexp_sound thm
R33857:33881 Equiv <> fold_constants_aexp_sound thm
R33903:33917 Equiv <> CSeq_congruence prfax
R33903:33917 Equiv <> CSeq_congruence prfax
R33958:33963 Equiv <> bequiv def
R33968:33986 Equiv <> fold_constants_bexp def
R33958:33963 Equiv <> bequiv def
R33968:33986 Equiv <> fold_constants_bexp def
R34007:34031 Equiv <> fold_constants_bexp_sound prfax
R34007:34031 Equiv <> fold_constants_bexp_sound prfax
R34050:34068 Equiv <> fold_constants_bexp def
R34100:34113 Equiv <> CIf_congruence prfax
R34050:34068 Equiv <> fold_constants_bexp def
R34100:34113 Equiv <> CIf_congruence prfax
R34100:34113 Equiv <> CIf_congruence prfax
R34100:34113 Equiv <> CIf_congruence prfax
R34100:34113 Equiv <> CIf_congruence prfax
R34100:34113 Equiv <> CIf_congruence prfax
R34100:34113 Equiv <> CIf_congruence prfax
R34328:34339 Equiv <> trans_cequiv thm
R34328:34339 Equiv <> trans_cequiv thm
R34378:34385 Equiv <> IFB_true thm
R34378:34385 Equiv <> IFB_true thm
R34439:34450 Equiv <> trans_cequiv thm
R34439:34450 Equiv <> trans_cequiv thm
R34489:34497 Equiv <> IFB_false prfax
R34489:34497 Equiv <> IFB_false prfax
def 36958:36967 <> subst_aexp
R36974:36975 Maps <> id ind
R36983:36986 Imp <> aexp ind
R36994:36997 Imp <> aexp ind
R37002:37005 Imp <> aexp ind
R37018:37018 Equiv <> a var
R37029:37032 Imp <> ANum constr
R37051:37054 Imp <> ANum constr
R37062:37064 Imp <> AId constr
R37087:37092 Maps <> beq_id def
R37094:37094 Equiv <> i var
R37111:37113 Imp <> AId constr
R37104:37104 Equiv <> u var
R37122:37126 Imp <> APlus constr
R37144:37148 Imp <> APlus constr
R37171:37180 Equiv <> subst_aexp def
R37184:37184 Equiv <> u var
R37182:37182 Equiv <> i var
R37151:37160 Equiv <> subst_aexp def
R37164:37164 Equiv <> u var
R37162:37162 Equiv <> i var
R37194:37199 Imp <> AMinus constr
R37216:37221 Imp <> AMinus constr
R37244:37253 Equiv <> subst_aexp def
R37257:37257 Equiv <> u var
R37255:37255 Equiv <> i var
R37224:37233 Equiv <> subst_aexp def
R37237:37237 Equiv <> u var
R37235:37235 Equiv <> i var
R37267:37271 Imp <> AMult constr
R37289:37293 Imp <> AMult constr
R37316:37325 Equiv <> subst_aexp def
R37329:37329 Equiv <> u var
R37327:37327 Equiv <> i var
R37296:37305 Equiv <> subst_aexp def
R37309:37309 Equiv <> u var
R37307:37307 Equiv <> i var
def 37351:37363 <> subst_aexp_ex
R37446:37450 Coq.Init.Logic <> :type_scope:x_'='_x not
R37492:37492 Coq.Init.Logic <> :type_scope:x_'='_x not
R37369:37378 Equiv <> subst_aexp def
R37424:37428 Imp <> APlus constr
R37439:37441 Imp <> AId constr
R37443:37443 Imp <> X def
R37431:37433 Imp <> AId constr
R37435:37435 Imp <> Y def
R37383:37387 Imp <> APlus constr
R37400:37403 Imp <> ANum constr
R37390:37393 Imp <> ANum constr
R37380:37380 Imp <> X def
R37451:37455 Imp <> APlus constr
R37466:37470 Imp <> APlus constr
R37483:37486 Imp <> ANum constr
R37473:37476 Imp <> ANum constr
R37458:37460 Imp <> AId constr
R37462:37462 Imp <> Y def
def 37688:37707 <> subst_equiv_property
R37734:37739 Equiv <> cequiv def
R37784:37786 Imp <> ::x_';;'_x not
R37777:37781 Imp <> ::x_'::='_x not
R37775:37776 Equiv <> i1 var
R37782:37783 Equiv <> a1 var
R37789:37793 Imp <> ::x_'::='_x not
R37787:37788 Equiv <> i2 var
R37794:37803 Equiv <> subst_aexp def
R37811:37812 Equiv <> a2 var
R37808:37809 Equiv <> a1 var
R37805:37806 Equiv <> i1 var
R37751:37753 Imp <> ::x_';;'_x not
R37744:37748 Imp <> ::x_'::='_x not
R37742:37743 Equiv <> i1 var
R37749:37750 Equiv <> a1 var
R37756:37760 Imp <> ::x_'::='_x not
R37754:37755 Equiv <> i2 var
R37761:37762 Equiv <> a2 var
prf 39063:39075 <> subst_inequiv
R39081:39082 Coq.Init.Logic <> :type_scope:'~'_x not
R39083:39102 Equiv <> subst_equiv_property def
R39121:39140 Equiv <> subst_equiv_property def
R39351:39365 Imp <> ::x_';;'_x not
R39324:39328 Imp <> ::x_'::='_x not
R39323:39323 Imp <> X def
R39329:39333 Imp <> APlus constr
R39344:39347 Imp <> ANum constr
R39336:39338 Imp <> AId constr
R39340:39340 Imp <> X def
R39367:39371 Imp <> ::x_'::='_x not
R39366:39366 Imp <> Y def
R39372:39374 Imp <> AId constr
R39376:39376 Imp <> X def
R39351:39365 Imp <> ::x_';;'_x not
R39324:39328 Imp <> ::x_'::='_x not
R39323:39323 Imp <> X def
R39329:39333 Imp <> APlus constr
R39344:39347 Imp <> ANum constr
R39336:39338 Imp <> AId constr
R39340:39340 Imp <> X def
R39367:39371 Imp <> ::x_'::='_x not
R39366:39366 Imp <> Y def
R39372:39374 Imp <> AId constr
R39376:39376 Imp <> X def
R39432:39446 Imp <> ::x_';;'_x not
R39405:39409 Imp <> ::x_'::='_x not
R39404:39404 Imp <> X def
R39410:39414 Imp <> APlus constr
R39425:39428 Imp <> ANum constr
R39417:39419 Imp <> AId constr
R39421:39421 Imp <> X def
R39448:39452 Imp <> ::x_'::='_x not
R39447:39447 Imp <> Y def
R39453:39457 Imp <> APlus constr
R39468:39471 Imp <> ANum constr
R39460:39462 Imp <> AId constr
R39464:39464 Imp <> X def
R39432:39446 Imp <> ::x_';;'_x not
R39405:39409 Imp <> ::x_'::='_x not
R39404:39404 Imp <> X def
R39410:39414 Imp <> APlus constr
R39425:39428 Imp <> ANum constr
R39417:39419 Imp <> AId constr
R39421:39421 Imp <> X def
R39448:39452 Imp <> ::x_'::='_x not
R39447:39447 Imp <> Y def
R39453:39457 Imp <> APlus constr
R39468:39471 Imp <> ANum constr
R39460:39462 Imp <> AId constr
R39464:39464 Imp <> X def
R39500:39505 Equiv <> cequiv def
R39500:39505 Equiv <> cequiv def
R39722:39729 Maps <> t_update def
R39758:39758 Imp <> Y def
R39732:39739 Maps <> t_update def
R39753:39753 Imp <> X def
R39741:39751 Imp <> empty_state def
R39722:39729 Maps <> t_update def
R39758:39758 Imp <> Y def
R39732:39739 Maps <> t_update def
R39753:39753 Imp <> X def
R39741:39751 Imp <> empty_state def
R39783:39790 Maps <> t_update def
R39819:39819 Imp <> Y def
R39793:39800 Maps <> t_update def
R39814:39814 Imp <> X def
R39802:39812 Imp <> empty_state def
R39783:39790 Maps <> t_update def
R39819:39819 Imp <> Y def
R39793:39800 Maps <> t_update def
R39814:39814 Imp <> X def
R39802:39812 Imp <> empty_state def
R39848:39850 Imp <> ::x_'/'_x_'\\'_x not
R39862:39865 Imp <> ::x_'/'_x_'\\'_x not
R39851:39861 Imp <> empty_state def
R39888:39890 Imp <> ::x_'/'_x_'\\'_x not
R39902:39905 Imp <> ::x_'/'_x_'\\'_x not
R39891:39901 Imp <> empty_state def
R39959:39966 Maps <> t_update def
R39980:39980 Imp <> X def
R39968:39978 Imp <> empty_state def
R39939:39943 Imp <> E_Seq constr
R40000:40004 Imp <> E_Ass constr
R39848:39850 Imp <> ::x_'/'_x_'\\'_x not
R39862:39865 Imp <> ::x_'/'_x_'\\'_x not
R39851:39861 Imp <> empty_state def
R39888:39890 Imp <> ::x_'/'_x_'\\'_x not
R39902:39905 Imp <> ::x_'/'_x_'\\'_x not
R39891:39901 Imp <> empty_state def
R39888:39890 Imp <> ::x_'/'_x_'\\'_x not
R39902:39905 Imp <> ::x_'/'_x_'\\'_x not
R39891:39901 Imp <> empty_state def
R39959:39966 Maps <> t_update def
R39980:39980 Imp <> X def
R39968:39978 Imp <> empty_state def
R39939:39943 Imp <> E_Seq constr
R40000:40004 Imp <> E_Ass constr
R40000:40004 Imp <> E_Ass constr
R39959:39966 Maps <> t_update def
R39980:39980 Imp <> X def
R39968:39978 Imp <> empty_state def
R39939:39943 Imp <> E_Seq constr
R40000:40004 Imp <> E_Ass constr
R40000:40004 Imp <> E_Ass constr
R39959:39966 Maps <> t_update def
R39980:39980 Imp <> X def
R39968:39978 Imp <> empty_state def
R39939:39943 Imp <> E_Seq constr
R40000:40004 Imp <> E_Ass constr
R40000:40004 Imp <> E_Ass constr
R39959:39966 Maps <> t_update def
R39980:39980 Imp <> X def
R39968:39978 Imp <> empty_state def
R39939:39943 Imp <> E_Seq constr
R40159:40161 Coq.Init.Logic <> :type_scope:x_'='_x not
R40182:40200 Imp <> ceval_deterministic thm
R40205:40215 Imp <> empty_state def
R40159:40161 Coq.Init.Logic <> :type_scope:x_'='_x not
R40182:40200 Imp <> ceval_deterministic thm
R40205:40215 Imp <> empty_state def
R40257:40259 Coq.Init.Logic <> :type_scope:x_'='_x not
R40256:40256 Imp <> Y def
R40264:40264 Imp <> Y def
R40257:40259 Coq.Init.Logic <> :type_scope:x_'='_x not
R40256:40256 Imp <> Y def
R40264:40264 Imp <> Y def
ind 40672:40691 <> var_not_used_in_aexp
constr 40722:40727 <> VNUNum
constr 40776:40780 <> VNUId
constr 40838:40844 <> VNUPlus
constr 40978:40985 <> VNUMinus
constr 41120:41126 <> VNUMult
R40696:40697 Maps <> id ind
R40706:40709 Coq.Init.Logic <> :type_scope:x_'->'_x not
R40702:40705 Imp <> aexp ind
R40740:40759 Equiv <> var_not_used_in_aexp ind
R40764:40767 Imp <> ANum constr
R40769:40769 Equiv <> n var
R40799:40802 Coq.Init.Logic <> :type_scope:x_'->'_x not
R40803:40822 Equiv <> var_not_used_in_aexp ind
R40827:40829 Imp <> AId constr
R40831:40831 Equiv <> Y var
R40794:40797 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R40798:40798 Equiv <> Y var
R40892:40901 Coq.Init.Logic <> :type_scope:x_'->'_x not
R40927:40936 Coq.Init.Logic <> :type_scope:x_'->'_x not
R40937:40956 Equiv <> var_not_used_in_aexp ind
R40961:40965 Imp <> APlus constr
R40970:40971 Equiv <> a2 var
R40967:40968 Equiv <> a1 var
R40902:40921 Equiv <> var_not_used_in_aexp ind
R40925:40926 Equiv <> a2 var
R40867:40886 Equiv <> var_not_used_in_aexp ind
R40890:40891 Equiv <> a1 var
R41033:41042 Coq.Init.Logic <> :type_scope:x_'->'_x not
R41068:41077 Coq.Init.Logic <> :type_scope:x_'->'_x not
R41078:41097 Equiv <> var_not_used_in_aexp ind
R41102:41107 Imp <> AMinus constr
R41112:41113 Equiv <> a2 var
R41109:41110 Equiv <> a1 var
R41043:41062 Equiv <> var_not_used_in_aexp ind
R41066:41067 Equiv <> a2 var
R41008:41027 Equiv <> var_not_used_in_aexp ind
R41031:41032 Equiv <> a1 var
R41174:41183 Coq.Init.Logic <> :type_scope:x_'->'_x not
R41209:41218 Coq.Init.Logic <> :type_scope:x_'->'_x not
R41219:41238 Equiv <> var_not_used_in_aexp ind
R41243:41247 Imp <> AMult constr
R41252:41253 Equiv <> a2 var
R41249:41250 Equiv <> a1 var
R41184:41203 Equiv <> var_not_used_in_aexp ind
R41207:41208 Equiv <> a2 var
R41149:41168 Equiv <> var_not_used_in_aexp ind
R41172:41173 Equiv <> a1 var
prf 41264:41278 <> aeval_weakening
R41326:41331 Coq.Init.Logic <> :type_scope:x_'->'_x not
R41358:41360 Coq.Init.Logic <> :type_scope:x_'='_x not
R41332:41336 Imp <> aeval def
R41357:41357 Equiv <> a var
R41339:41346 Maps <> t_update def
R41353:41354 Equiv <> ni var
R41351:41351 Equiv <> i var
R41348:41349 Equiv <> st var
R41361:41365 Imp <> aeval def
R41370:41370 Equiv <> a var
R41367:41368 Equiv <> st var
R41302:41321 Equiv <> var_not_used_in_aexp ind
R41325:41325 Equiv <> a var
R41323:41323 Equiv <> i var
prf 41680:41695 <> inequiv_exercise
R41700:41701 Coq.Init.Logic <> :type_scope:'~'_x not
R41702:41707 Equiv <> cequiv def
R41735:41738 Imp <> ::'SKIP' not
R41710:41715 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R41721:41724 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R41729:41732 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R41716:41720 Imp <> BTrue constr
R41725:41728 Imp <> ::'SKIP' not
mod 43846:43849 <> Himp
ind 43947:43949 Himp com
constr 43965:43969 Himp CSkip
constr 43981:43984 Himp CAss
constr 44010:44013 Himp CSeq
constr 44039:44041 Himp CIf
constr 44075:44080 Himp CWhile
constr 44107:44112 Himp CHavoc
R43973:43975 Equiv <> com ind
R43990:43993 Coq.Init.Logic <> :type_scope:x_'->'_x not
R43998:44001 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44002:44004 Equiv <> com ind
R43994:43997 Imp <> aexp ind
R43988:43989 Maps <> id ind
R44020:44023 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44027:44030 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44031:44033 Equiv <> com ind
R44024:44026 Equiv <> com ind
R44017:44019 Equiv <> com ind
R44049:44052 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44056:44059 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44063:44066 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44067:44069 Equiv <> com ind
R44060:44062 Equiv <> com ind
R44053:44055 Equiv <> com ind
R44045:44048 Imp <> bexp ind
R44088:44091 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44095:44098 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44099:44101 Equiv <> com ind
R44092:44094 Equiv <> com ind
R44084:44087 Imp <> bexp ind
R44118:44121 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44122:44124 Equiv <> com ind
R44116:44117 Maps <> id ind
R44182:44186 Equiv Himp CSkip constr
not 44168:44168 Himp ::'SKIP'
R44216:44219 Equiv Himp CAss constr
not 44198:44198 Himp ::x_'::='_x
R44267:44270 Equiv Himp CSeq constr
not 44250:44250 Himp ::x_';;'_x
R44355:44360 Equiv Himp CWhile constr
not 44324:44324 Himp ::'WHILE'_x_'DO'_x_'END'
R44454:44456 Equiv Himp CIf constr
not 44412:44412 Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI'
R44529:44534 Equiv Himp CHavoc constr
not 44513:44513 Himp ::'HAVOC'_x
ind 44963:44967 Himp ceval
constr 45008:45013 Himp E_Skip
constr 45056:45060 Himp E_Ass
constr 45186:45190 Himp E_Seq
constr 45322:45329 Himp E_IfTrue
constr 45486:45494 Himp E_IfFalse
constr 45652:45661 Himp E_WhileEnd
constr 45781:45791 Himp E_WhileLoop
R44974:44977 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44983:44986 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44992:44995 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44987:44991 Imp <> state def
R44978:44982 Imp <> state def
R44971:44973 Equiv Himp com ind
R46037:46041 Equiv <> ceval ind
R45029:45033 Imp <> state def
R45040:45042 Equiv Himp ::x_'/'_x_'\\'_x not
R45045:45048 Equiv Himp ::x_'/'_x_'\\'_x not
R45036:45039 Equiv Himp ::'SKIP' not
R45043:45044 Equiv <> st var
R45049:45050 Equiv <> st var
R45077:45081 Imp <> state def
R45090:45093 Imp <> aexp ind
R45101:45103 Coq.Init.Datatypes <> nat ind
R45111:45112 Maps <> id ind
R45137:45146 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45147:45147 Equiv Himp ::x_'/'_x_'\\'_x not
R45156:45159 Equiv Himp ::x_'/'_x_'\\'_x not
R45162:45165 Equiv Himp ::x_'/'_x_'\\'_x not
R45149:45153 Equiv Himp ::x_'::='_x not
R45148:45148 Equiv <> X var
R45154:45155 Equiv <> a1 var
R45160:45161 Equiv <> st var
R45166:45173 Maps <> t_update def
R45180:45180 Equiv <> n var
R45178:45178 Equiv <> X var
R45175:45176 Equiv <> st var
R45133:45135 Coq.Init.Logic <> :type_scope:x_'='_x not
R45122:45126 Imp <> aeval def
R45131:45132 Equiv <> a1 var
R45128:45129 Equiv <> st var
R45136:45136 Equiv <> n var
R45210:45212 Equiv Himp com ind
R45230:45234 Imp <> state def
R45258:45267 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45284:45293 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45294:45294 Equiv Himp ::x_'/'_x_'\\'_x not
R45303:45306 Equiv Himp ::x_'/'_x_'\\'_x not
R45309:45312 Equiv Himp ::x_'/'_x_'\\'_x not
R45297:45300 Equiv Himp ::x_';;'_x not
R45295:45296 Equiv <> c1 var
R45301:45302 Equiv <> c2 var
R45307:45308 Equiv <> st var
R45313:45316 Equiv <> st'' var
R45270:45272 Equiv Himp ::x_'/'_x_'\\'_x not
R45276:45279 Equiv Himp ::x_'/'_x_'\\'_x not
R45268:45269 Equiv <> c2 var
R45273:45275 Equiv <> st' var
R45280:45283 Equiv <> st'' var
R45246:45248 Equiv Himp ::x_'/'_x_'\\'_x not
R45251:45254 Equiv Himp ::x_'/'_x_'\\'_x not
R45244:45245 Equiv <> c1 var
R45249:45250 Equiv <> st var
R45255:45257 Equiv <> st' var
R45350:45354 Imp <> state def
R45363:45366 Imp <> bexp ind
R45378:45380 Equiv Himp com ind
R45408:45417 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45432:45441 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45442:45442 Equiv Himp ::x_'/'_x_'\\'_x not
R45468:45471 Equiv Himp ::x_'/'_x_'\\'_x not
R45474:45477 Equiv Himp ::x_'/'_x_'\\'_x not
R45443:45446 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45449:45454 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45457:45462 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45465:45467 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45447:45448 Equiv <> b1 var
R45455:45456 Equiv <> c1 var
R45463:45464 Equiv <> c2 var
R45472:45473 Equiv <> st var
R45478:45480 Equiv <> st' var
R45420:45422 Equiv Himp ::x_'/'_x_'\\'_x not
R45425:45428 Equiv Himp ::x_'/'_x_'\\'_x not
R45418:45419 Equiv <> c1 var
R45423:45424 Equiv <> st var
R45429:45431 Equiv <> st' var
R45401:45403 Coq.Init.Logic <> :type_scope:x_'='_x not
R45390:45394 Imp <> beval def
R45399:45400 Equiv <> b1 var
R45396:45397 Equiv <> st var
R45404:45407 Coq.Init.Datatypes <> true constr
R45515:45519 Imp <> state def
R45528:45531 Imp <> bexp ind
R45543:45545 Equiv Himp com ind
R45574:45583 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45598:45607 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45608:45608 Equiv Himp ::x_'/'_x_'\\'_x not
R45634:45637 Equiv Himp ::x_'/'_x_'\\'_x not
R45640:45643 Equiv Himp ::x_'/'_x_'\\'_x not
R45609:45612 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45615:45620 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45623:45628 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45631:45633 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45613:45614 Equiv <> b1 var
R45621:45622 Equiv <> c1 var
R45629:45630 Equiv <> c2 var
R45638:45639 Equiv <> st var
R45644:45646 Equiv <> st' var
R45586:45588 Equiv Himp ::x_'/'_x_'\\'_x not
R45591:45594 Equiv Himp ::x_'/'_x_'\\'_x not
R45584:45585 Equiv <> c2 var
R45589:45590 Equiv <> st var
R45595:45597 Equiv <> st' var
R45566:45568 Coq.Init.Logic <> :type_scope:x_'='_x not
R45555:45559 Imp <> beval def
R45564:45565 Equiv <> b1 var
R45561:45562 Equiv <> st var
R45569:45573 Coq.Init.Datatypes <> false constr
R45678:45681 Imp <> bexp ind
R45690:45694 Imp <> state def
R45703:45705 Equiv Himp com ind
R45734:45744 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45745:45745 Equiv Himp ::x_'/'_x_'\\'_x not
R45764:45767 Equiv Himp ::x_'/'_x_'\\'_x not
R45770:45773 Equiv Himp ::x_'/'_x_'\\'_x not
R45746:45751 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R45754:45757 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R45760:45763 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R45752:45753 Equiv <> b1 var
R45758:45759 Equiv <> c1 var
R45768:45769 Equiv <> st var
R45774:45775 Equiv <> st var
R45726:45728 Coq.Init.Logic <> :type_scope:x_'='_x not
R45715:45719 Imp <> beval def
R45724:45725 Equiv <> b1 var
R45721:45722 Equiv <> st var
R45729:45733 Coq.Init.Datatypes <> false constr
R45817:45821 Imp <> state def
R45830:45833 Imp <> bexp ind
R45842:45844 Equiv Himp com ind
R45872:45881 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45896:45905 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45940:45949 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45950:45950 Equiv Himp ::x_'/'_x_'\\'_x not
R45969:45972 Equiv Himp ::x_'/'_x_'\\'_x not
R45975:45978 Equiv Himp ::x_'/'_x_'\\'_x not
R45951:45956 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R45959:45962 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R45965:45968 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R45957:45958 Equiv <> b1 var
R45963:45964 Equiv <> c1 var
R45973:45974 Equiv <> st var
R45979:45982 Equiv <> st'' var
R45906:45906 Equiv Himp ::x_'/'_x_'\\'_x not
R45925:45928 Equiv Himp ::x_'/'_x_'\\'_x not
R45932:45935 Equiv Himp ::x_'/'_x_'\\'_x not
R45907:45912 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R45915:45918 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R45921:45924 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R45913:45914 Equiv <> b1 var
R45919:45920 Equiv <> c1 var
R45929:45931 Equiv <> st' var
R45936:45939 Equiv <> st'' var
R45884:45886 Equiv Himp ::x_'/'_x_'\\'_x not
R45889:45892 Equiv Himp ::x_'/'_x_'\\'_x not
R45882:45883 Equiv <> c1 var
R45887:45888 Equiv <> st var
R45893:45895 Equiv <> st' var
R45865:45867 Coq.Init.Logic <> :type_scope:x_'='_x not
R45854:45858 Imp <> beval def
R45863:45864 Equiv <> b1 var
R45860:45861 Equiv <> st var
R45868:45871 Coq.Init.Datatypes <> true constr
R46037:46041 Equiv Himp ceval ind
not 46012:46012 Himp ::x_'/'_x_'\\'_x
def 46156:46169 Himp havoc_example1
R46173:46173 Equiv Himp ::x_'/'_x_'\\'_x not
R46181:46184 Equiv Himp ::x_'/'_x_'\\'_x not
R46196:46199 Equiv Himp ::x_'/'_x_'\\'_x not
R46174:46179 Equiv Himp ::'HAVOC'_x not
R46180:46180 Imp <> X def
R46185:46195 Imp <> empty_state def
R46200:46207 Maps <> t_update def
R46221:46221 Imp <> X def
R46209:46219 Imp <> empty_state def
def 46271:46284 Himp havoc_example2
R46290:46290 Equiv Himp ::x_'/'_x_'\\'_x not
R46305:46308 Equiv Himp ::x_'/'_x_'\\'_x not
R46320:46323 Equiv Himp ::x_'/'_x_'\\'_x not
R46295:46297 Equiv Himp ::x_';;'_x not
R46291:46294 Equiv Himp ::'SKIP' not
R46298:46303 Equiv Himp ::'HAVOC'_x not
R46304:46304 Imp <> Z def
R46309:46319 Imp <> empty_state def
R46324:46331 Maps <> t_update def
R46345:46345 Imp <> Z def
R46333:46343 Imp <> empty_state def
def 46486:46491 Himp cequiv
R46502:46504 Equiv Himp com ind
R46533:46537 Imp <> state def
R46556:46560 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R46544:46546 Equiv Himp ::x_'/'_x_'\\'_x not
R46549:46552 Equiv Himp ::x_'/'_x_'\\'_x not
R46542:46543 Equiv <> c1 var
R46547:46548 Equiv <> st var
R46553:46555 Equiv <> st' var
R46563:46565 Equiv Himp ::x_'/'_x_'\\'_x not
R46568:46571 Equiv Himp ::x_'/'_x_'\\'_x not
R46561:46562 Equiv <> c2 var
R46566:46567 Equiv <> st var
R46572:46574 Equiv <> st' var
def 46791:46793 Himp pXY
R46807:46809 Equiv Himp ::x_';;'_x not
R46800:46805 Equiv Himp ::'HAVOC'_x not
R46806:46806 Imp <> X def
R46810:46815 Equiv Himp ::'HAVOC'_x not
R46816:46816 Imp <> Y def
def 46831:46833 Himp pYX
R46847:46849 Equiv Himp ::x_';;'_x not
R46840:46845 Equiv Himp ::'HAVOC'_x not
R46846:46846 Imp <> Y def
R46850:46855 Equiv Himp ::'HAVOC'_x not
R46856:46856 Imp <> X def
prf 46964:46977 Himp pXY_cequiv_pYX
R46997:47000 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R46983:46988 Equiv Himp cequiv def
R46994:46996 Equiv Himp pYX def
R46990:46992 Equiv Himp pXY def
R47001:47001 Coq.Init.Logic <> :type_scope:'~'_x not
R47002:47007 Equiv Himp cequiv def
R47013:47015 Equiv Himp pYX def
R47009:47011 Equiv Himp pXY def
def 47181:47186 Himp ptwice
R47200:47202 Equiv Himp ::x_';;'_x not
R47193:47198 Equiv Himp ::'HAVOC'_x not
R47199:47199 Imp <> X def
R47203:47208 Equiv Himp ::'HAVOC'_x not
R47209:47209 Imp <> Y def
def 47224:47228 Himp pcopy
R47242:47244 Equiv Himp ::x_';;'_x not
R47235:47240 Equiv Himp ::'HAVOC'_x not
R47241:47241 Imp <> X def
R47246:47250 Equiv Himp ::x_'::='_x not
R47245:47245 Imp <> Y def
R47251:47253 Imp <> AId constr
R47255:47255 Imp <> X def
prf 47426:47444 Himp ptwice_cequiv_pcopy
R47469:47472 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R47450:47455 Equiv Himp cequiv def
R47464:47468 Equiv Himp pcopy def
R47457:47462 Equiv Himp ptwice def
R47473:47473 Coq.Init.Logic <> :type_scope:'~'_x not
R47474:47479 Equiv Himp cequiv def
R47488:47492 Equiv Himp pcopy def
R47481:47486 Equiv Himp ptwice def
def 48338:48339 Himp p1
R48343:48345 Equiv Himp com ind
R48352:48358 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48386:48394 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48437:48442 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48359:48362 Imp <> BNot constr
R48365:48367 Imp <> BEq constr
R48378:48381 Imp <> ANum constr
R48370:48372 Imp <> AId constr
R48374:48374 Imp <> X def
R48402:48408 Equiv Himp ::x_';;'_x not
R48395:48400 Equiv Himp ::'HAVOC'_x not
R48401:48401 Imp <> Y def
R48410:48414 Equiv Himp ::x_'::='_x not
R48409:48409 Imp <> X def
R48415:48419 Imp <> APlus constr
R48430:48433 Imp <> ANum constr
R48422:48424 Imp <> AId constr
R48426:48426 Imp <> X def
def 48457:48458 Himp p2
R48462:48464 Equiv Himp com ind
R48471:48477 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48505:48513 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48518:48523 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48478:48481 Imp <> BNot constr
R48484:48486 Imp <> BEq constr
R48497:48500 Imp <> ANum constr
R48489:48491 Imp <> AId constr
R48493:48493 Imp <> X def
R48514:48517 Equiv Himp ::'SKIP' not
prf 48784:48797 Himp p1_may_diverge
R48825:48830 Coq.Init.Logic <> :type_scope:x_'->'_x not
R48831:48832 Coq.Init.Logic <> :type_scope:'~'_x not
R48835:48837 Equiv Himp ::x_'/'_x_'\\'_x not
R48840:48843 Equiv Himp ::x_'/'_x_'\\'_x not
R48833:48834 Equiv Himp p1 def
R48838:48839 Equiv <> st var
R48844:48846 Equiv <> st' var
R48820:48823 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R48816:48817 Equiv <> st var
R48819:48819 Imp <> X def
prf 48892:48905 Himp p2_may_diverge
R48933:48938 Coq.Init.Logic <> :type_scope:x_'->'_x not
R48939:48940 Coq.Init.Logic <> :type_scope:'~'_x not
R48943:48945 Equiv Himp ::x_'/'_x_'\\'_x not
R48948:48951 Equiv Himp ::x_'/'_x_'\\'_x not
R48941:48942 Equiv Himp p2 def
R48946:48947 Equiv <> st var
R48952:48954 Equiv <> st' var
R48928:48931 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R48924:48925 Equiv <> st var
R48927:48927 Imp <> X def
prf 49095:49105 Himp p1_p2_equiv
R49109:49114 Equiv Himp cequiv def
R49119:49120 Equiv Himp p2 def
R49116:49117 Equiv Himp p1 def
def 49301:49302 Himp p3
R49306:49308 Equiv Himp com ind
R49327:49331 Equiv Himp ::x_';;'_x not
R49316:49320 Equiv Himp ::x_'::='_x not
R49315:49315 Imp <> Z def
R49321:49324 Imp <> ANum constr
R49332:49338 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49366:49374 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49396:49401 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49339:49342 Imp <> BNot constr
R49345:49347 Imp <> BEq constr
R49358:49361 Imp <> ANum constr
R49350:49352 Imp <> AId constr
R49354:49354 Imp <> X def
R49382:49388 Equiv Himp ::x_';;'_x not
R49375:49380 Equiv Himp ::'HAVOC'_x not
R49381:49381 Imp <> X def
R49389:49394 Equiv Himp ::'HAVOC'_x not
R49395:49395 Imp <> Z def
def 49416:49417 Himp p4
R49421:49423 Equiv Himp com ind
R49444:49448 Equiv Himp ::x_';;'_x not
R49431:49436 Equiv Himp ::x_'::='_x not
R49443:49443 Equiv Himp ::x_'::='_x not
R49430:49430 Imp <> X def
R49437:49440 Imp <> ANum constr
R49450:49455 Equiv Himp ::x_'::='_x not
R49462:49462 Equiv Himp ::x_'::='_x not
R49449:49449 Imp <> Z def
R49456:49459 Imp <> ANum constr
prf 49475:49487 Himp p3_p4_inequiv
R49491:49492 Coq.Init.Logic <> :type_scope:'~'_x not
R49493:49498 Equiv Himp cequiv def
R49503:49504 Equiv Himp p4 def
R49500:49501 Equiv Himp p3 def
def 49631:49632 Himp p5
R49636:49638 Equiv Himp com ind
R49645:49651 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49679:49687 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49695:49700 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49652:49655 Imp <> BNot constr
R49658:49660 Imp <> BEq constr
R49671:49674 Imp <> ANum constr
R49663:49665 Imp <> AId constr
R49667:49667 Imp <> X def
R49688:49693 Equiv Himp ::'HAVOC'_x not
R49694:49694 Imp <> X def
def 49715:49716 Himp p6
R49720:49722 Equiv Himp com ind
R49730:49734 Equiv Himp ::x_'::='_x not
R49729:49729 Imp <> X def
R49735:49738 Imp <> ANum constr
prf 49753:49763 Himp p5_p6_equiv
R49767:49772 Equiv Himp cequiv def
R49777:49778 Equiv Himp p6 def
R49774:49775 Equiv Himp p5 def
R49832:49835 Equiv Himp <> mod
prf 50529:50559 <> swap_noninterfering_assignments
R50592:50597 Coq.Init.Logic <> :type_scope:x_'->'_x not
R50624:50629 Coq.Init.Logic <> :type_scope:x_'->'_x not
R50656:50661 Coq.Init.Logic <> :type_scope:x_'->'_x not
R50662:50667 Equiv <> cequiv def
R50711:50713 Imp <> ::x_';;'_x not
R50704:50708 Imp <> ::x_'::='_x not
R50702:50703 Equiv <> l2 var
R50709:50710 Equiv <> a2 var
R50716:50720 Imp <> ::x_'::='_x not
R50714:50715 Equiv <> l1 var
R50721:50722 Equiv <> a1 var
R50683:50685 Imp <> ::x_';;'_x not
R50676:50680 Imp <> ::x_'::='_x not
R50674:50675 Equiv <> l1 var
R50681:50682 Equiv <> a1 var
R50688:50692 Imp <> ::x_'::='_x not
R50686:50687 Equiv <> l2 var
R50693:50694 Equiv <> a2 var
R50630:50649 Equiv <> var_not_used_in_aexp ind
R50654:50655 Equiv <> a1 var
R50651:50652 Equiv <> l2 var
R50598:50617 Equiv <> var_not_used_in_aexp ind
R50622:50623 Equiv <> a2 var
R50619:50620 Equiv <> l1 var
R50586:50589 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R50584:50585 Equiv <> l1 var
R50590:50591 Equiv <> l2 var
def 51211:51217 <> capprox
R51228:51230 Imp <> com ind
R51260:51264 Imp <> state def
R51284:51287 Coq.Init.Logic <> :type_scope:x_'->'_x not
R51290:51292 Imp <> ::x_'/'_x_'\\'_x not
R51295:51298 Imp <> ::x_'/'_x_'\\'_x not
R51288:51289 Equiv <> c2 var
R51293:51294 Equiv <> st var
R51299:51301 Equiv <> st' var
R51272:51274 Imp <> ::x_'/'_x_'\\'_x not
R51277:51280 Imp <> ::x_'/'_x_'\\'_x not
R51270:51271 Equiv <> c1 var
R51275:51276 Equiv <> st var
R51281:51283 Equiv <> st' var
def 51698:51699 <> c3
R51703:51705 Imp <> com ind
def 51783:51784 <> c4
R51788:51790 Imp <> com ind
prf 51866:51880 <> c3_c4_different
R51899:51902 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R51884:51885 Coq.Init.Logic <> :type_scope:'~'_x not
R51886:51892 Equiv <> capprox def
R51897:51898 Equiv <> c4 prfax
R51894:51895 Equiv <> c3 prfax
R51903:51904 Coq.Init.Logic <> :type_scope:'~'_x not
R51905:51911 Equiv <> capprox def
R51916:51917 Equiv <> c3 prfax
R51913:51914 Equiv <> c4 prfax
def 52037:52040 <> cmin
R52044:52046 Imp <> com ind
prf 52125:52136 <> cmin_minimal
R52150:52156 Equiv <> capprox def
R52163:52163 Equiv <> c var
R52158:52161 Equiv <> cmin prfax
def 52340:52344 <> zprop
R52351:52353 Imp <> com ind
prf 52441:52456 <> zprop_preserving
R52482:52485 Coq.Init.Logic <> :type_scope:x_'->'_x not
R52498:52501 Coq.Init.Logic <> :type_scope:x_'->'_x not
R52502:52506 Equiv <> zprop prfax
R52508:52509 Equiv <> c' var
R52486:52492 Equiv <> capprox def
R52496:52497 Equiv <> c' var
R52494:52494 Equiv <> c var
R52475:52479 Equiv <> zprop prfax
R52481:52481 Equiv <> c var
